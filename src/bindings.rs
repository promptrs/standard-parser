// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
pub type Delims = promptrs::core::util::Delims;
pub type Response = promptrs::core::util::Response;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_parse_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: i32,
    arg3: i32,
    arg4: *mut u8,
    arg5: usize,
    arg6: *mut u8,
    arg7: usize,
    arg8: *mut u8,
    arg9: usize,
    arg10: *mut u8,
    arg11: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result5 = T::parse(
        _rt::string_lift(bytes0),
        match arg2 {
            0 => None,
            1 => {
                let e = {
                    let len3 = arg9;
                    let bytes3 = _rt::Vec::from_raw_parts(arg8.cast(), len3, len3);
                    let len4 = arg11;
                    let bytes4 = _rt::Vec::from_raw_parts(arg10.cast(), len4, len4);
                    promptrs::core::util::Delims {
                        reasoning: match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg5;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg4.cast(),
                                        len1,
                                        len1,
                                    );
                                    let len2 = arg7;
                                    let bytes2 = _rt::Vec::from_raw_parts(
                                        arg6.cast(),
                                        len2,
                                        len2,
                                    );
                                    (_rt::string_lift(bytes1), _rt::string_lift(bytes2))
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        tool_call: (_rt::string_lift(bytes3), _rt::string_lift(bytes4)),
                    }
                };
                Some(e)
            }
            _ => _rt::invalid_enum_discriminant(),
        },
    );
    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
    let promptrs::core::util::Response {
        reasoning: reasoning7,
        content: content7,
        tool_calls: tool_calls7,
    } = result5;
    match reasoning7 {
        Some(e) => {
            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
            let vec8 = (e.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr().cast::<u8>();
            let len8 = vec8.len();
            ::core::mem::forget(vec8);
            *ptr6.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
            *ptr6.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr8
                .cast_mut();
        }
        None => {
            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
        }
    };
    let vec9 = (content7.into_bytes()).into_boxed_slice();
    let ptr9 = vec9.as_ptr().cast::<u8>();
    let len9 = vec9.len();
    ::core::mem::forget(vec9);
    *ptr6.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
    *ptr6.add(3 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr9
        .cast_mut();
    let vec16 = tool_calls7;
    let len16 = vec16.len();
    let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
        vec16.len() * (4 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    let result16 = if layout16.size() != 0 {
        let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
        if ptr.is_null() {
            _rt::alloc::handle_alloc_error(layout16);
        }
        ptr
    } else {
        ::core::ptr::null_mut()
    };
    for (i, e) in vec16.into_iter().enumerate() {
        let base = result16.add(i * (4 * ::core::mem::size_of::<*const u8>()));
        {
            let promptrs::core::util::ToolCall {
                name: name10,
                arguments: arguments10,
            } = e;
            let vec11 = (name10.into_bytes()).into_boxed_slice();
            let ptr11 = vec11.as_ptr().cast::<u8>();
            let len11 = vec11.len();
            ::core::mem::forget(vec11);
            *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len11;
            *base.add(0).cast::<*mut u8>() = ptr11.cast_mut();
            let vec15 = arguments10;
            let len15 = vec15.len();
            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                vec15.len() * (4 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
            let result15 = if layout15.size() != 0 {
                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                if ptr.is_null() {
                    _rt::alloc::handle_alloc_error(layout15);
                }
                ptr
            } else {
                ::core::ptr::null_mut()
            };
            for (i, e) in vec15.into_iter().enumerate() {
                let base = result15.add(i * (4 * ::core::mem::size_of::<*const u8>()));
                {
                    let (t12_0, t12_1) = e;
                    let vec13 = (t12_0.into_bytes()).into_boxed_slice();
                    let ptr13 = vec13.as_ptr().cast::<u8>();
                    let len13 = vec13.len();
                    ::core::mem::forget(vec13);
                    *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len13;
                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                    let vec14 = (t12_1.into_bytes()).into_boxed_slice();
                    let ptr14 = vec14.as_ptr().cast::<u8>();
                    let len14 = vec14.len();
                    ::core::mem::forget(vec14);
                    *base.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len14;
                    *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr14.cast_mut();
                }
            }
            *base.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len15;
            *base.add(2 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = result15;
        }
    }
    *ptr6.add(6 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len16;
    *ptr6.add(5 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = result16;
    ptr6
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_parse<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {}
        _ => {
            let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l2 = *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
        }
    }
    let l3 = *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l4 = *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l3, l4, 1);
    let l5 = *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l6 = *arg0.add(6 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
    let base16 = l5;
    let len16 = l6;
    for i in 0..len16 {
        let base = base16.add(i * (4 * ::core::mem::size_of::<*const u8>()));
        {
            let l7 = *base.add(0).cast::<*mut u8>();
            let l8 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l7, l8, 1);
            let l9 = *base
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l10 = *base.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
            let base15 = l9;
            let len15 = l10;
            for i in 0..len15 {
                let base = base15.add(i * (4 * ::core::mem::size_of::<*const u8>()));
                {
                    let l11 = *base.add(0).cast::<*mut u8>();
                    let l12 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l11, l12, 1);
                    let l13 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l13, l14, 1);
                }
            }
            _rt::cabi_dealloc(
                base15,
                len15 * (4 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
        }
    }
    _rt::cabi_dealloc(
        base16,
        len16 * (4 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
}
pub trait Guest {
    fn parse(response: _rt::String, delims: Option<Delims>) -> Response;
}
#[doc(hidden)]
macro_rules! __export_world_parser_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "parse")] unsafe extern "C" fn
        export_parse(arg0 : * mut u8, arg1 : usize, arg2 : i32, arg3 : i32, arg4 : * mut
        u8, arg5 : usize, arg6 : * mut u8, arg7 : usize, arg8 : * mut u8, arg9 : usize,
        arg10 : * mut u8, arg11 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_parse_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
        arg9, arg10, arg11) } } #[unsafe (export_name = "cabi_post_parse")] unsafe extern
        "C" fn _post_return_parse(arg0 : * mut u8,) { unsafe { $($path_to_types)*::
        __post_return_parse::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_parser_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 7 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 7 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod promptrs {
    pub mod core {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod util {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Delims {
                pub reasoning: Option<(_rt::String, _rt::String)>,
                pub tool_call: (_rt::String, _rt::String),
            }
            impl ::core::fmt::Debug for Delims {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Delims")
                        .field("reasoning", &self.reasoning)
                        .field("tool-call", &self.tool_call)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ToolCall {
                pub name: _rt::String,
                pub arguments: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for ToolCall {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCall")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub reasoning: Option<_rt::String>,
                pub content: _rt::String,
                pub tool_calls: _rt::Vec<ToolCall>,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("reasoning", &self.reasoning)
                        .field("content", &self.content)
                        .field("tool-calls", &self.tool_calls)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_parser_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_parser_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_parser_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:promptrs:core@0.1.0:parser:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 418] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa5\x02\x01A\x02\x01\
A\x09\x01B\x0b\x01o\x02ss\x01k\0\x01r\x02\x09reasoning\x01\x09tool-call\0\x04\0\x06\
delims\x03\0\x02\x01p\0\x01r\x02\x04names\x09arguments\x04\x04\0\x09tool-call\x03\
\0\x05\x01ks\x01p\x06\x01r\x03\x09reasoning\x07\x07contents\x0atool-calls\x08\x04\
\0\x08response\x03\0\x09\x03\0\x18promptrs:core/util@0.1.0\x05\0\x02\x03\0\0\x06\
delims\x03\0\x06delims\x03\0\x01\x02\x03\0\0\x08response\x03\0\x08response\x03\0\
\x03\x01k\x02\x01@\x02\x08responses\x06delims\x05\0\x04\x04\0\x05parse\x01\x06\x04\
\0\x1apromptrs:core/parser@0.1.0\x04\0\x0b\x0c\x01\0\x06parser\x03\0\0\0G\x09pro\
ducers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x06\
0.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
